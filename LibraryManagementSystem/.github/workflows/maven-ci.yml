name: Java CI with Maven

# Triggers the workflow on push or pull request events but only for the main branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # Using a standard Linux runner

    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4 # Using version 4 of the checkout action

      # Step 2: Sets up JDK. Make sure the Java version matches your pom.xml
      - name: Set up JDK 11
        uses: actions/setup-java@v4 # Using version 4 of the setup-java action
        with:
          java-version: '11' # Should match <maven.compiler.source> and <target> in your pom.xml
          distribution: 'temurin' # A popular OpenJDK distribution (formerly AdoptOpenJDK)
          cache: 'maven' # Caches Maven dependencies for faster builds on subsequent runs

      # Step 3: Build and test with Maven
      # The -B flag runs Maven in batch mode (non-interactive)
      # --file pom.xml explicitly specifies the POM file (good practice)
      - name: Build and test with Maven
        run: mvn -B clean test --file pom.xml
        # 'clean test' will clean previous builds and then compile and run tests.
        # Using 'test' goal is sufficient as it implies compilation.
        # 'install' (mvn -B clean install --file pom.xml) would also work and additionally install to local repo,
        # but 'test' is usually enough for CI validation.

      # Optional Step 4: Upload test results (Surefire reports)
      # This step is useful for seeing test results directly in GitHub Actions artifacts,
      # especially if a test fails.
      - name: Upload Surefire Test Report
        if: always() # This ensures the report is uploaded even if previous steps (like tests) fail
        uses: actions/upload-artifact@v4 # Using version 4 of the upload-artifact action
        with:
          name: surefire-report-${{ github.run_id }} # Creates a uniquely named artifact for each run
          path: target/surefire-reports/ # Path to where Maven Surefire plugin outputs its XML reports
# This is a test comment to trigger a new evaluation